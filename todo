#!/usr/bin/env bash
# This file can be sourced or executed.
# More information below at the "Execution" section

##
# FILE FORMAT
#
#   TFS=|
#   TIME_NOW | PRIORITY | DUE_DATE | ESTIMATED_TIME | CURRENT_STATUS | MESSAGE
#   1          2          3          4                5                6

source ~/.bashrc.colors

# Configurable values
TFS='|'                 # TODO Field Separator
mark_completed='[âœ“]'    # Completed elements
mark_unstarted='[ ]'    # Open elements
date_fmt="+%FT%T"       # Date format
config_name=".config"

# Derived script variables
todo_dir=${SHELL_TODO_DIR:-${HOME}/.config/shell-todo}
todo_config=${todo_dir}/${config_name}
switch=$(sed "1q;d" ${todo_config}) # Top line stores current list name
if [[ ${switch} == ${config_name} ]]; then
  echo -e "${RED}error:${NOCOLOR} invalid todo list name detected. Check ${todo_config}"
  exit 1
fi
todo_file=$todo_dir/$switch
now=$(date ${date_fmt})


##
# help functions
#

function todo_help() {
cat << EOF
Usage:  todo COMMAND [OPTIONS]

A simple command line TODO list manager

Commands:
	help        This help message.
	add	        Remove an item by INDEX number.
	update N    Update the Nth entry
	mark N      Add an item by ITEM.
	unmark N    No error messages.
	remove N

Examples:
	todo add -m "Something to do"
		Add a todo item
	todo show 		
		List all items in todo list 
	todo remove 1
		Remove item at index 1
	todo switch <NAME>
	    Switch to or create list <NAME>

EOF
}

function todo_add_help() {
cat << EOF
Usage:  todo add [OPTIONS]

Add a message to the currently selected todo list.

The current time is recorded with the message. Optional fields include
the due date, priority, and expected time to complete.

OPTIONS
  -m MESSAGE       Required. The todo message to store.
  -d DATE          Due date
  -p PRIORITY      Priority [0-9|low|normal|medium|high]
  -e ESTIMATE      Estimated time to complete task

EOF
}

function todo_show_help() {
cat << EOF
Usage:  todo show [OPTIONS]

List the entries for the currently selected todo file

OPTIONS
  -v          Enable verbose output

EOF
}

##
# General purpose utility functions
#

function build_entry() {
	echo "$now$TFS$priority$TFS$due$TFS$updated$TFS$estimate$TFS$status$TFS$message"
}

function todo_add_args() {
  while [[ ! -z $1 ]]; do
    opt=$1
	arg=$2
	echo "opt $1, arg $2"
    case ${opt} in
	  -e|--estimate)
	    shift 2
		estimate=$argtos
		;;
	  -d|--due)
	    shift 2
	    due=$arg
		;;
	  -m|--message)
	    shift 2
	    message=$arg
		;;
	  -p|--priority)
	    shift 2
	    priority=$arg
		;;
	   *) todo_add_help; exit 1;;
	esac
  done
}

function todo_add() {
  # Default values
  # TODO: prefer empty values
  due="n/a"
  estimate="n/a"
  priority="normal"
  message=" "
  status=${mark_unstarted}
  updated=$now

  # collect arguments
  todo_add_args "$@"

  # Normalize due date and test
  if [[ "${due}" == "n/a" ]]; then
    normalized_due="n/a"
  else
    normalized_due=$(date -d ${due} ${date_fmt})
    if [[ $? != 0 ]]; then
      echo -e "${RED}error:${NOCOLOR} invalid due date"
	  exit 1
    fi
  fi

  # Test validity of message and store
  if [[ ${message} != " " ]]; then
    new_line=$(build_entry)
    echo "$new_line" >> "${todo_file}"
	if [[ $? -eq 0 ]]; then
	  echo -e "${GREEN}Info:${NOCOL} wrote to ${YELLOW}${switch}${NOCOLOR}"
	  todo_show | tail -n 1
	fi
  fi
}

function todo_update() {
 lineno=$1
 shift 1
 
 if [[ ! "$lineno" =~ ^-?[0-9]+$ ]]; then
   echo -e "${red}error:${nocolor} todo update N [OPTIONS]"
   exit 1
 fi

  line=$(awk "NR==$lineno {print}" ${todo_file})
  updated=$now
  IFS=$TFS read -r now priority due updated_ estimate status message <<< $line

  # Collect new arguments
  todo_add_args "$@"

  new_line=$(build_entry)
  echo ${new_line}
  sed -i "${lineno}s?.*?${new_line}?" "${todo_file}"
}

function todo_show_args() {
  # collect todo_show options
  while [[ ! -z $1 ]]; do
    opt=$1
	arg=$2

    case ${opt} in
	  -v|--verbose) shift 1; verbose=1;;
	  *)  
        # Check if the input is a valid integer
        if [[ "$1" =~ ^-?[0-9]+$ ]]; then
		  echo "line number unsupported at this time"
		  exit 1
          lineno="$1"
		  verbose=1
		  shift 1
        else	  
	      echo "error: unknown argument "$1
		  exit 1
		fi;;
	esac
  done
}

function todo_show() {
  local verbose=0
  local lineno=""

  # collect the options
  todo_show_args "$@"

  # display the contents
  echo -e "${YELLOW}File:${NOCOLOR} $switch"
  exec 3< ${todo_file}
  lineno=1
  while IFS=$TFS read -r created priority due updated estimate status message <&3 
  do
	echo "${lineno}: ${status} ${message}"
	[[ ${verbose} == 1 ]] && echo "  created: ${created}"
	[[ ${verbose} == 1 ]] && echo "  updated: ${updated}"
	[[ ${verbose} == 1 ]] && echo "      due: ${due}"
	[[ ${verbose} == 1 ]] && echo " priority: ${priority}"
	lineno=$((lineno+1))
  done
  exec 3<&-
}

# todo_update_status
# implements "todo mark" and "todo unmark"
function todo_update_status {
	lineno=$1

	# update line lineno with status mark
	line=$(sed "${lineno}q;d" ${todo_file})
	updated=$now
	IFS=$TFS read -r now priority due updated_ estimate status message <<< $line
	status="${status_mark}"
    result=$(build_entry)
    
	# replace the line in the todo_file
	# This sed expression has had trouble, using '!' for separator for now
	sed -i "${lineno}s!.*!${result}!" "${todo_file}"
	todo_show | grep "^${lineno}:"
}

# todo_switch
# With parameter, switch to (and create) indicated todo list
# Without parameter, list all options and indicate current list
function todo_switch() {
	if [ -z $1 ]; then
	  for f in "$todo_dir"/*; do
		f=$(basename $f)
	    completed=$(grep -e "${mark_completed}" $f | wc -l | awk '{print $1}')
		unstarted=$(grep -e "${mark_unstarted}" $f | wc -l | awk '{print $1}')
    	entries="[${completed}/${unstarted}]"
		echo "$f $entries"
	  done
	else
	  touch ${todo_dir}/$1
      sed -i "1s/.*./$1/" ${todo_config}
	fi
}

# todo_remove
# Remove an entry from currently configured todo list
function todo_remove() {
	num_lines=$(wc -l ${todo_file} | awk '{print $1}')
	if (( $1 > 0 && $1 <= num_lines )); then
	  sed -i -e "${1}d" "${todo_file}"
	else
	  echo -e "${RED}error:${NOCOLOR} index out of bounds"
	  exit 1
    fi
}

# "main" routine - branch on primary command argument
function todo() {
	# Check to see if $todo_file exists and create an empty one if not
	[[ -f "${todo_file}" ]] || cat /dev/null > "${todo_file}"

	# Remove whitespace from the ends of lines and empty lines
	sed -i '/^\s*$/d' "${todo_file}"
	sed -i '/^$/d' "${todo_file}"

    # Parse the arguments
    case $1 in
		help|--help) todo_help;;
		remove) shift; todo_remove $@;;
		   add) shift; todo_add "$@";;
		update) shift; todo_update "$@";;
          mark) shift; status_mark=${mark_completed}; todo_update_status $@;;
        unmark) shift; status_mark=${mark_unstarted}; todo_update_status $@;;
		switch) shift; todo_switch $@;;	
		  show) shift; todo_show $@;;
		     *) todo_help;;
	esac
}


commands="add show update mark unmark remove"
_todo_compgen() {
    local cur="${COMP_WORDS[COMP_CWORD]}"  # Current word being completed
    #cur="todo"
	COMPREPLY=($(compgen -W "$commands" -- "$cur"))
}



# Entry point -- provide autocomplete when sourced or enter "main"
$(return >/dev/null 2>&1) # TODO: DANGER! This is not stable
if [ "$?" -eq "0" ]; then
	complete -F _todo_compgen todo
else
	todo "$@" # Call the todo function
fi
